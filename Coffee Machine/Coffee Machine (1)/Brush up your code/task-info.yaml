type: edu
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: "package machine;\n\nimport java.util.Scanner;\n\npublic class CoffeeMachine\
    \ {\n    public static Scanner scan;\n    public static boolean flag;\n    public\
    \ static String action;\n    public static void main(String[] args) {\n\n//  \
    \      Coffee cf = new Coffee();\n//\n//        System.out.println(\"Coffee is\
    \ ready!\");\n//        System.out.println(\"Write how many cups of coffee you\
    \ will need: \");\n        scan = new Scanner(System.in);\n        int cups =\
    \ 9;\n        int water = 400;\n        int milk = 540 ;\n        int beans =\
    \ 120;\n        int money = 550;\n\n//        try {\n//            System.out.println(\"\
    Write how many ml of water the coffee machine has:\");\n//            water =\
    \ scan.nextInt();\n//            System.out.println(\"Write how many ml of milk\
    \ the coffee machine has:\");\n//            milk = scan.nextInt();\n//      \
    \      System.out.println(\"Write how many grams of coffee beans the coffee machine\
    \ has:\");\n//            beans = scan.nextInt();\n//            System.out.println(\"\
    Write how many cups of coffee you will need:\");\n//            cups = scan.nextInt();\n\
    //        } catch (Exception e) {\n//            System.out.println(\"Please input\
    \ a valid number\");\n//            scan.next();\n//        }\n//        System.out.printf(\"\
    For %d cups of coffee you will need: \\n\" +\n//                \"%d ml of water\\\
    n\" +\n//                \"%d ml of milk\\n\" +\n//                \"%d g of coffee\
    \ beans\",cups,cups*water,cups*milk,cups*beans);\n//        Coffee coffeeMaker\
    \ = new Coffee(water,milk,beans,cups);\n//        coffeeMaker.makeCoffee();\n\
    \        Coffee coffeeMaker = new Coffee(water,milk,beans,cups,money);\n     \
    \   action = \"\";\n        coffeeMaker.start(coffeeMaker);\n\n    }\n    public\
    \ static class Coffee\n    {\n        private int machineWater;\n        private\
    \ int machineMilk;\n        private int machineBeans;\n        private int cups;\n\
    \        private int money;\n\n\n        public Coffee() {\n            System.out.println(\"\
    Starting to make a coffee\");\n//            this.makeCoffee();\n        }\n \
    \       public Coffee(int water, int milk, int beans, int cups) {\n          \
    \  this.machineWater = water;\n            this.machineMilk = milk;\n        \
    \    this.machineBeans = beans;\n            this.cups = cups;\n            flag\
    \ = false;\n//            System.out.println(\"Starting to make a coffee\");\n\
    \n        }\n\n        public Coffee(int water, int milk, int beans, int cups,\
    \ int money) {\n            this.machineWater = water;\n            this.machineMilk\
    \ = milk;\n            this.machineBeans = beans;\n            this.cups = cups;\n\
    \            this.money = money;\n        }\n\n        private void makeCoffee()\
    \ {\n            int waterNeed = 200;\n            int milkNeed = 50;\n      \
    \      int beansNeed = 15;\n\n            int minTemp = Math.min(machineWater/waterNeed,machineMilk/milkNeed);\n\
    \            int min = Math.min(minTemp,machineBeans/beansNeed);\n\n         \
    \   if(min>cups){\n                System.out.printf(\"Yes, I can make that amount\
    \ of coffee (and even %d more than that)\",min-cups);\n            }\n       \
    \     else if(min==cups){\n                System.out.println(\"Yes, I can make\
    \ that amount of coffee\");\n            }\n            else{\n              \
    \  System.out.printf(\"No, I can make only %d cup(s) of coffee\",min);\n     \
    \       }\n        }\n\n//        private void makeCoffee() {\n//            this.grind();\n\
    //            this.boil();\n//            this.mix();\n//            this.pour();\n\
    //            this.milk();\n//        }\n\n        public void grind() {\n   \
    \         System.out.println(\"Grinding coffee beans\");\n        }\n\n      \
    \  public void boil() {\n            System.out.println(\"Boiling water\");\n\
    \        }\n\n        public void mix() {\n            System.out.println(\"Mixing\
    \ boiled water with crushed coffee beans\");\n        }\n\n        public void\
    \ pour() {\n            System.out.println(\"Pouring coffee into the cup\");\n\
    \        }\n\n        public void milk() {\n            System.out.println(\"\
    Pouring some milk into the cup\");\n        }\n\n        @Override\n        public\
    \ String toString() {\n\n            String coffeeState = \"The coffee machine\
    \ has:\\n\" +\n                    machineWater + \" ml of water\\n\" +\n    \
    \                machineMilk + \" ml of milk\\n\" +\n                    machineBeans\
    \ + \" g of coffee beans\\n\" +\n                    cups + \" disposable cups\\\
    n\" +\n                    \"$\" + money + \" of money\";\n            return\
    \ coffeeState;\n        }\n\n        public void buy() {\n            System.out.println(\"\
    What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino: \");\n     \
    \       String type = \"\";\n            try {\n                type = scan.next();\n\
    \                if(!type.equals(\"1\") && !type.equals(\"2\") && !type.equals(\"\
    3\") && !type.equals(\"back\")){\n                    throw new Exception();\n\
    \n                }\n            } catch (Exception e) {\n                System.out.println(\"\
    Please enter  a valid input\");\n            }\n            switch (type){\n \
    \               case \"1\" :\n                    if(this.machineWater < 250){\n\
    \                        System.out.println(\"Sorry, not enough water!\");}\n\
    \                    else {\n                        if(this.machineBeans < 16)\
    \ {\n                            System.out.println(\"Sorry, not enough coffee\
    \ beans!\");\n                        }\n                        else\n      \
    \                  {\n                            if(this.cups< 1)\n         \
    \                   {\n                                System.out.println(\"Sorry,\
    \ not enough cups!\");\n                            }\n                      \
    \      else\n                            {\n                                this.machineWater\
    \ -= 250;\n                                this.machineBeans -= 16;\n        \
    \                        this.money += 4;\n                                this.cups\
    \ -= 1;\n                                System.out.println(\"I have enough resources,\
    \ making you a coffee!\");\n                            }\n                  \
    \      }\n                    }\n\n                    break;\n              \
    \  case \"2\" :\n\n                    if(this.machineWater < 350){\n        \
    \                System.out.println(\"Sorry, not enough water!\");}\n        \
    \            else {\n                        if(this.machineMilk < 75) {\n   \
    \                         System.out.println(\"Sorry, not enough milk!\");\n \
    \                       }\n                        else\n                    \
    \    {\n                            if(this.machineBeans < 16)\n             \
    \               {\n                                System.out.println(\"Sorry,\
    \ not enough coffee beans!\");\n                            }\n              \
    \              else\n                            {\n                         \
    \       if(this.cups< 1)\n                                {\n                \
    \                    System.out.println(\"Sorry, not enough cups!\");\n      \
    \                          }\n                                else {\n       \
    \                             this.machineWater -= 350;\n                    \
    \                this.machineMilk -= 75;\n                                   \
    \ this.machineBeans -= 20;\n                                    this.money +=\
    \ 7;\n                                    this.cups -= 1;\n                  \
    \                  System.out.println(\"I have enough resources, making you a\
    \ coffee!\");\n                                }\n                           \
    \ }\n                        }\n                    }\n\n                    break;\n\
    \                case \"3\" :\n\n                    if(this.machineWater < 200){\n\
    \                        System.out.println(\"Sorry, not enough water!\");}\n\
    \                    else {\n                        if(this.machineMilk < 100)\
    \ {\n                            System.out.println(\"Sorry, not enough milk!\"\
    );\n                        }\n                        else\n                \
    \        {\n                            if(this.machineBeans < 12)\n         \
    \                   {\n                                System.out.println(\"Sorry,\
    \ not enough coffee beans!\");\n                            }\n              \
    \              else\n                            {\n                         \
    \       if(this.cups< 1)\n                                {\n                \
    \                    System.out.println(\"Sorry, not enough cups!\");\n      \
    \                          }\n                                else {\n       \
    \                             this.machineWater -= 200;\n                    \
    \                this.machineMilk -= 100;\n                                  \
    \  this.machineBeans -= 12;\n                                    this.money +=\
    \ 6;\n                                    this.cups -= 1;\n                  \
    \                  System.out.println(\"I have enough resources, making you a\
    \ coffee!\");\n                                }\n                           \
    \ }\n                        }\n                    }\n\n                    break;\n\
    \                case \"back\" :\n                    this.start(this);\n\n  \
    \          }\n        }\n\n        public void fill() {\n            System.out.println(\"\
    Write how many ml of water you want to add: \");\n            try {\n        \
    \        this.machineWater += scan.nextInt();\n            } catch (Exception\
    \ e) {\n                System.out.println(\"Please enter  a valid input\");\n\
    \                scan.next();\n            }\n            System.out.println(\"\
    Write how many ml of milk you want to add: \");\n            try {\n         \
    \       this.machineMilk += scan.nextInt();\n            } catch (Exception e)\
    \ {\n                System.out.println(\"Please enter  a valid input\");\n  \
    \              scan.next();\n            }\n            System.out.println(\"\
    Write how many grams of coffee beans you want to add: \");\n            try {\n\
    \                this.machineBeans += scan.nextInt();\n            } catch (Exception\
    \ e) {\n                System.out.println(\"Please enter  a valid input\");\n\
    \                scan.next();\n            }\n            System.out.println(\"\
    Write how many disposable cups you want to add: \");\n            try {\n    \
    \            this.cups += scan.nextInt();\n            } catch (Exception e) {\n\
    \                System.out.println(\"Please enter  a valid input\");\n      \
    \          scan.next();\n            }\n        }\n\n        public void take()\
    \ {\n            System.out.println(\"I gave you $\" + this.money);\n        \
    \    this.money = 0;\n        }\n\n        public void start(Coffee coffeeMaker)\
    \ {\n           \n            while (!action.equals(\"exit\")) {\n           \
    \     System.out.println(\"Write action (buy, fill, take, remaining, exit): \"\
    );\n\n                    action = scan.next();\n                    if(!action.equals(\"\
    buy\") && !action.equals(\"fill\") && !action.equals(\"take\")&& !action.equals(\"\
    remaining\")&& !action.equals(\"exit\")){\n                        System.out.println(\"\
    Please enter a valid input\");\n                        continue;\n          \
    \          }\n\n\n\n                switch (action){\n                    case\
    \ \"buy\":\n                        coffeeMaker.buy();\n                     \
    \   break;\n                    case \"fill\":\n                        coffeeMaker.fill();\n\
    \                        break;\n                    case \"take\":\n        \
    \                coffeeMaker.take();\n                        break;\n       \
    \             case \"remaining\":\n                        System.out.println(coffeeMaker);\n\
    \                        break;\n                    case \"exit\":\n        \
    \                break;\n                }\n\n\n            }\n\n        }\n \
    \   }\n}\n"
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/33/stages/180/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Tue, 15 Nov 2022 23:45:13 UTC
record: -1
